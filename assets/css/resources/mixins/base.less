// basecondition ~ less-framework ~ v3.2
// copyright 2014 ~ Joachim Doerr ~ hello@basecondition.com
// licensed under MIT or GPLv3 ~ git.io/OJYZgw

// ----------------------------------------------------- ~ base
// #base > .html(#fff);
// #base > .body(#fff, #444, @base-font-family);
// #base > .link(#000, #666, none, underline);
// #base > .sticky-footer(200px, 500px, 40px, ~"#main", ~"footer");
// #base > .user-select(none); // none|text|all|element
// #base > .appearance(button);
// #base > .backface-visibility(hidden);

// @helper methode: ../elements/helper.less
// @usage: .appearance(button); // normal|icon|window|button|menu|field
// @usage: .backface-visibility(hidden); // visible|hidden
// @usage: .user-select(none); // none|text|all|element

// @namespace: #base

#base {
    
    // @methode: .html
    // @usage: #base > .html(#fff);
    
    .html(@var-bg-color: @base-background) {
        #unset > .distances();
        #size > .square(100%);
        #background > .background(@var-bg-color);
        position: relative;
    }
    
    // @methode: .body
    // @usage: #base > .body(#fff, #444, @base-font-family);
    
    .body(@var-bg-color: @base-background, @var-color: @base-color, @var-font-family: @base-font-family, @var-smoothing: false, @backface-visibility: hidden) {
        .inception(@var) when (@var = true) {
            #font > .smoothing();
        }
        .inception(@var) when (@var = hidden) {
            #base > .backface-visibility(hidden); // http://bit.ly/NEdoDq
        }
        #unset > .distances();
        #size > .square(100%);
        #background > .background(@var-bg-color);
        color: @var-color;
        font-family: @var-font-family;
        .inception(@var-smoothing);
    }
    
    // @methode: .link
    // @usage: #base > .link(#000, #ccc, underline, none);
    
    .link(@var-color: @blue, @var-hover-color: @blue-dark, @var-decoration: underline, @var-hover-decoration: none) {
        color: @var-color;
        text-decoration: @var-decoration;
        
        &:hover {
            color: @var-hover-color;
            text-decoration: @var-hover-decoration
        }
    }
    
    // @methode: .sticky-footer
    // @usage: #base > .sticky-footer(200px, 500px, 40px, ~"#main", ~"footer");
    
    .sticky-footer(@var-footer-height: 100px, @var-main-min-height: 300px, @var-add-main-bottom-padding: 0px, @var-main: ~"#main", @var-footer: ~"footer") {
        .inception(@var-footer-height, @var-main-min-height, @var-add-main-bottom-padding) when (ispixel(@var-footer-height)) and (ispixel(@var-main-min-height)) and (ispixel(@var-add-main-bottom-padding)) {
            min-height: 100%;
            position: relative;
            
            @{var-main} {
                position: relative;
                min-height: @var-main-min-height;
                padding-bottom: ceil(@var-footer-height + @var-add-main-bottom-padding);
            }
            @{var-footer} {
                position: absolute;
                height: @var-footer-height;
                width: 100%;
                bottom: 0;
            }
        }
        .inception(@var-footer-height, @var-main-min-height, @var-add-main-bottom-padding);
    }
    
    // @methode: .user-select
    // @usage: #base > .user-select(none); // none|text|all|element
    
    .user-select(@var) {
        .inception(@var) {
            -webkit-user-select: @var;
               -moz-user-select: @var;
                -ms-user-select: @var;
                    user-select: @var;
        }
        .inception-call(@var) when (@var = none) {
            .inception(@var);
        }
        .inception-call(@var) when (@var = text) {
            .inception(@var);
        }
        .inception-call(@var) when (@var = all) {
            .inception(@var);
        }
        .inception-call(@var) when (@var = element) {
            .inception(@var);
        }
        .inception-call(@var);
    }
    
    // @methode: .appearance
    // @usage: #base > .appearance(button); // normal|icon|window|button|menu|field
    
    .appearance(@var: normal) {
        .inception(@var) {
            -webkit-appearance: @var;
               -moz-appearance: @var;
                    appearance: @var;
        }
        .inception-call(@var) when (@var = normal) {
            .inception(@var);
        }
        .inception-call(@var) when (@var = icon) {
            .inception(@var);
        }
        .inception-call(@var) when (@var = window) {
            .inception(@var);
        }
        .inception-call(@var) when (@var = button) {
            .inception(@var);
        }
        .inception-call(@var) when (@var = menu) {
            .inception(@var);
        }
        .inception-call(@var) when (@var = field) {
            .inception(@var);
        }
        .inception-call(@var);
    }
    
    // @methode: .backface-visibility
    // @usage: #base > .backface-visibility(hidden); // visible|hidden
    
    .backface-visibility(@var: visible) {
        .inception(@var) {
            -webkit-backface-visibility: @var;
               -moz-backface-visibility: @var;
                -ms-backface-visibility: @var;
                    backface-visibility: @var;
        }
        .inception-call(@var) when (@var = visible) {
            .inception(@var);
        }
        .inception-call(@var) when (@var = hidden) {
            .inception(@var);
        }
        .inception-call(@var);
    }
}